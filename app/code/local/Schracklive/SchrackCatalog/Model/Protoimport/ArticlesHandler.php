<?php

use com\schrack\queue\protobuf\Message;

/**
 * @author d.laslov
 */
class Schracklive_SchrackCatalog_Model_Protoimport_ArticlesHandler extends Schracklive_SchrackCatalog_Model_Protoimport_HandlerBase {

    private static $_staticIdMap;

    // Generated by install/update script:
    public static $UNDYNAMIC_SCHRACK_ATTRIBUTES = array(
        'schrack_accessories_necessary',
        'schrack_accessories_optional',
        'schrack_catalognr',
        'schrack_detail_description',
        'schrack_detail_description_title',
        'schrack_ean',
        'schrack_image_url',
        'schrack_is_cable',
        'schrack_sts_main_article_sku',
        'schrack_sts_sub_article_skus',
        'schrack_sts_main_vpe_type',
        'schrack_sts_main_vpe_size',
        'schrack_is_on_request',
        'schrack_keyword_foreign',
        'schrack_keyword_foreign_hidden',
        'schrack_long_text_addition',
        'schrack_main_category_id',
        'schrack_main_category_eid',
        'schrack_packingunit',
        'schrack_priceunit',
        'schrack_productgroup',
        'schrack_property_list',
        'schrack_qty_per_packaging_unit',
        'schrack_qtyunit',
        'schrack_qtyunit_id',
        'schrack_sortiment',
        'schrack_strategic_pillar',
        'schrack_substitute',
        'schrack_thumbnail_url',
        'schrack_url_key_without_sku',
        'schrack_valid_until',
        'schrack_vpes',
        'schrack_wws_ranking',
        'schrack_sts_printed_manufacturer_number',
        'schrack_sts_is_high_available',
        'schrack_sts_webshop_saleable',
        'schrack_sts_promotion_label',
        'schrack_sts_not_available',
        'schrack_sts_unmanageable_stocks',
        'schrack_sts_special_transport',
        'schrack_sts_transport_rate_pv',
        'schrack_sts_trans_rate_bat',
        'schrack_sts_plus_deli_time'
    );

    // these are normal ones with more than 1000 different values
    // so that doing them as multisels would heavily decrease performance:
    var $hugeAttributes = array(
        'schrack_best__nr_',
        'schrack_hlief-artikel_nummer',
        'schrack_bezeichnung',
        'schrack_preis',
        'schrack_lxbxh_mm',
        'schrack_cad_electrical_description',
        'schrack_hxbxt_mm',
        'schrack_bxhxt_mm',
        'schrack_nettogewicht',
        'schrack_optional_accessories'
    );

    var $_id2attrDefMap;
    var $_code2attrDefMap;
    var $_attributeSets = array();
    var $_attributeGroups = array();
    var $_facetOptionsCache = array();
    var $_selectFacets = array(); /* key = name, val = bool (true means multiselect) */
    /* @var $_productAssistent Schracklive_SchrackCatalog_Model_Import_Product */
    var $_productAssistent;
    var $_schrackAttributeSetId;
    var $_unhandledAttributes;
    var $_attributeCreated = false;
    var $_catalogCategoryProductTabName = null;

    function __construct ( $originTimestamp = null ) {
        parent::__construct($originTimestamp);
        $this->_code2attrDefMap = array();
        $this->_id2attrDefMap = Mage::getResourceModel('catalog/product_attribute_collection')->getItems();
        foreach ( $this->_id2attrDefMap as $id => $attrDef ) {
            $attrCode = $attrDef->getAttributeCode();
            $this->_code2attrDefMap[$attrCode] = $attrDef;
        }
        $this->_productAssistent = Mage::getModel('schrackcatalog/import_product');

        $this->_schrackAttributeSetId = Mage::helper('schrack')->getSchrackAttributeSetID();

        foreach ( $this->hugeAttributes as $attrName ) {
            $this->_selectFacets[$attrName] = false;
        }
        $this->_catalogCategoryProductTabName = Mage::getSingleton('core/resource')->getTableName('catalog_category_product');
    }

    protected function cleanup () {
        self::beginTrace('ArticlesHandler::cleanup');
        self::log('running now product cleanup...');

        /*
        // real delete all disabled products:
        $products = Mage::getModel('catalog/product')->getCollection()->addAttributeToFilter('status', Mage_Catalog_Model_Product_Status::STATUS_DISABLED);
        foreach ( $products as $prod ) {
            $prod->delete();
            unset($this->_allSchrack2MagentoIdMap[$prod->getSku()]);
        }
        */

        $productAttrs = Mage::getResourceModel('catalog/product_attribute_collection');
        /* @var $productAttr Mage_Catalog_Model_Resource_Eav_Attribute */
        foreach ( $productAttrs as $productAttr ) {
            $code = $productAttr->getAttributeCode();
            if ( $code === 'schrack_vpes' && $productAttr->getFrontendLabel() === 'VPEs' ) {
                $productAttr->delete();
                break;
            }
        }

        $this->fixProductUrlKeys();

        self::log('...product cleanup done.');
        self::endTrace('ArticlesHandler::cleanup');
    }

    public function fixProductUrlKeys () {
        $sql = "SELECT value FROM core_config_data WHERE path = 'product_url_keys_fixed'";
        if ( $this->_readConnection->fetchOne($sql) == '1' ) {
            self::log('product url keys already fixed.');
            return;
        }
        self::log('fix product url keys...');
        $sql = " SELECT prod.entity_id, prod.sku, url0.value AS url0key, url1.value AS url1key FROM catalog_product_entity prod"
             . " JOIN catalog_product_entity_varchar url0 ON url0.entity_id = prod.entity_id AND url0.store_id = 0 AND url0.attribute_id = (SELECT attribute_id FROM eav_attribute WHERE attribute_code = 'url_key' AND entity_type_id = 4)"
             . " JOIN catalog_product_entity_varchar url1 ON url1.entity_id = prod.entity_id AND url1.store_id = 1 AND url1.attribute_id = (SELECT attribute_id FROM eav_attribute WHERE attribute_code = 'url_key' AND entity_type_id = 4)"
             . " WHERE prod.schrack_sts_statuslocal <> 'tot' AND url0.value <> url1.value";
        $dbRes = $this->_readConnection->fetchAll($sql);
        if ( count($dbRes) > 0 ) {
            $this->_writeConnection->beginTransaction();
            try {
                foreach ( $dbRes as $row ) {
                    $entityId = $row['entity_id'];
                    $sku = $row['sku'];
                    $urlKey0 = $row['url0key'];
                    $urlKey0prepared = strtolower(rtrim($urlKey0, '-'));
                    $urlKey1 = $row['url1key'];
                    $sql = "UPDATE catalog_product_entity_varchar SET value = ? WHERE entity_id = ? and store_id = 0 AND attribute_id = (SELECT attribute_id FROM eav_attribute WHERE attribute_code = 'url_key' AND entity_type_id = 4)";
                    $this->_writeConnection->query($sql, [$urlKey0prepared, $entityId]);
                    if ( $urlKey0prepared != $urlKey1 ) {
                        $sql = "UPDATE catalog_product_entity_varchar SET value = ? WHERE entity_id = ? and store_id = 1 AND attribute_id = (SELECT attribute_id FROM eav_attribute WHERE attribute_code = 'url_key' AND entity_type_id = 4)";
                        $this->_writeConnection->query($sql, [$urlKey0prepared, $entityId]);
                        $this->addRedirectRename($urlKey1, $urlKey0prepared, null, $sku);
                        self::logProgressChar(1);
                    } else {
                        self::logProgressChar(0);
                    }
                }
                $sql = "INSERT INTO core_config_data (scope,scope_id,path,value) VALUES('default',0,'product_url_keys_fixed','1') ON DUPLICATE KEY UPDATE value = '1'";
                $this->_writeConnection->query($sql);
                $this->_writeConnection->commit();
            } catch ( Exception $ex ) {
                $this->_writeConnection->rollback();
                self::log("Exception: " . $ex->getMessage());
                Mage::logException($ex);
            }
        }
        self::log('...fix product url keys');
    }

    private function isAttrUnused ( Mage_Catalog_Model_Resource_Eav_Attribute $productAttr ) {
        $sql = "select count(*) from catalog_product_entity_varchar where attribute_id = (select attribute_id from eav_attribute where entity_type_id = 4 and attribute_code = '{$productAttr->getAttributeCode()}')";
        $cnt = $this->_readConnection->fetchOne($sql);
        return $cnt < 1;
    }

    protected function doHandle ( Message &$importMsg ) {
        $this->readFacetDefs($importMsg);
        $loopCounter = 0;
        $articlesCount = count($importMsg->getArticles());

        /* @var $protoArticle \com\schrack\queue\protobuf\Message\Article */
        foreach ( $importMsg->getArticles() as $protoArticle ) {
            $sku = $protoArticle->getId();
            // ###############################################
            if ( $this->_DO_ONLY_THAT_SKU !== null &&  strtoupper($sku) !== $this->_DO_ONLY_THAT_SKU )
                continue;
            // ###############################################
            $msgKey = 'impProd=' . $sku;
            if ( $this->_originTimestamp ) {
                $isLast = Mage::helper("schrack/mq")->isLatestUpdate($msgKey,$this->_originTimestamp);
                if ( ! $isLast ) {
                    self::logDebug('skipping sku ' . $sku . ' because message ts too old');
                    continue;
                }
            }

            if ( $protoArticle->getNotforwebshop() ) {
                self::logDebug('skipping sku ' . $sku . ' because product is for Datanorm only.');
                continue;
            }

            $oldTrace = self::$_logTrace; self::$_logTrace = true;
            self::beginTrace('ArticlesHandler::doHandle.loop');
            self::$_logTrace = $oldTrace;
            ++$loopCounter;
            self::logDebug('Article # '.$loopCounter.'/'.$articlesCount);
            $deleted = false;
            /* @var $magentoProduct Schracklive_SchrackCatalog_Model_Product */
            $magentoProduct = Mage::getModel('catalog/product');
            self::logDebug('start article ' . $sku);

            // Checks, if magento id - related to given $sku - is existing in the map:
            if(isset($this->_allSchrack2MagentoIdMap[$sku])) {
                $magentoId = $this->_allSchrack2MagentoIdMap[$sku];
                self::logDebug('magento id = ' . $magentoId);

                unset($this->_unhandledSchrack2MagentoIdMap[$sku]);
                self::beginTrace('ArticlesHandler::(load_product)');
                $magentoProduct->load($magentoId);
                self::endTrace('ArticlesHandler::(load_product)');
                if ( $protoArticle->getAction() === self::ACTION_KILL ) {
                    self::logProgressChar('d');
                    self::logDebug('deleting article ' . $sku);
                    $magentoProduct->setCategoryIds(array());
                    $magentoProduct->save(); // to remove all relations
                    // $magentoProduct->delete(); // bloody magento runs into a mem overflow here!
                    $this->_writeConnection->query("delete from catalog_product_entity where entity_id = ?",$magentoProduct->getId());
                    continue;
                }
                self::logProgressChar('u');
                $magentoProduct->getAttachmentsCollection();
            } else {
                $magentoId = null;
                self::logDebug('magento id = --> null (potential error for "' . $sku . '")');

                if ( $protoArticle->getAction() === self::ACTION_KILL ) {
                    continue;
                }
                self::logProgressChar('i');
                $magentoProduct->setSku($sku);
                $magentoProduct->setSchrackCatalognr($sku);
                self::logDebug("setting website-IDs: " . implode(',', $this->_websiteIds));
                $magentoProduct->setWebsiteIDs($this->_websiteIds);
                $magentoProduct->setType('simple');
                $magentoProduct->setAttributeSetId($this->_schrackAttributeSetId);
            }

            $this->prepareUnhandledAttributes($magentoProduct);

            $this->updateChangeableBaseData($sku,$protoArticle,$magentoProduct,$importMsg->getPackagetype());

            $this->handleDefaultGroup($protoArticle,$magentoProduct);
            $this->handleFacetGroups($protoArticle,$magentoProduct);
            $this->handleKeywords($protoArticle,$magentoProduct);
            $attachments = $this->handleMediadata($protoArticle,$magentoProduct);
            $this->handleScales($protoArticle,$magentoProduct);
            $this->handleSubstitutes($protoArticle,$magentoProduct);
            $this->handleAccessories($protoArticle,$magentoProduct);

            foreach ( $this->_unhandledAttributes as $unhandled ) {
                $magentoProduct->unsetData($unhandled);
            }

            // removing all article-category relations when
            // 1) full import (will be generated alter on again)
            // 2) dead and strategic no articles may not be any longer in structure
            if ( $importMsg->getPackagetype() === self::PACKAGE_TYPE_FULL  || $protoArticle->getAction() === self::ACTION_DELETE ) {
                $magentoProduct->setCategoryIds(array());
            }

            try {
                self::beginTrace('ArticlesHandler::(save_product)');
                // $magentoProduct->save();
                $magentoProduct->saveNative($this->_attributeCreated);
                $this->_attributeCreated = false;
                if ( $this->_originTimestamp ) {
                    Mage::helper("schrack/mq")->saveLatestUpdate($msgKey,$this->_originTimestamp);
                } else {
                    Mage::helper("schrack/mq")->removeTimestamp($msgKey);
                }
                self::endTrace('ArticlesHandler::(save_product)');
                foreach ( $this->_unhandledAttributes as $unhandled ) {
                    if ( $unhandled == 'schrack_sts_promotion_label' ) {
                        self::logDebug("Removing schrack_sts_promotion_label");
                    }
                    $this->clearAttribute($magentoProduct,$unhandled);
                }
                self::beginTrace('ArticlesHandler::(save_attachments)');
                foreach ( $attachments as $rec ) {
                    $rec->setEntityId($magentoProduct->getId());
                    $rec->setEntityTypeId($magentoProduct->getEntityTypeId());
                    $rec->save();
                }
                self::endTrace('ArticlesHandler::(save_attachments)');
                if ( ! $magentoId ) {
                    $this->_allSchrack2MagentoIdMap[$sku] = $magentoProduct->getId();
                    if ( self::$_staticIdMap ) {
                        self::$_staticIdMap[$sku] = $magentoProduct->getId();
                    }
                    self::logDebug('magento id (= ' . $magentoProduct->getId() . ') saved now to property: ArticleHandler->_allSchrack2MagentoIdMap');
                    $this->ensureDefaultStock($magentoProduct);
                }
                if ( self::$_logDebug ) {
                    $readConnection = Mage::getSingleton('core/resource')->getConnection('core_read');
                    $query = 'SELECT count(attachment_id) FROM catalog_attachment WHERE entity_id = '. (int)$magentoProduct->getId() . ' LIMIT 1';
                    $cntDB = $readConnection->fetchOne($query);
                    self::logDebug("attachment count stored in DB = $cntDB");
                }
            }
            catch ( Exception $ex ) {
                self::log('!!!' . $ex->getMessage());
                throw $ex;
            }

            self::logDebug('done article ' . $sku);
            $magentoProduct->clearInstance();
            unset($magentoProduct);
            if ( $loopCounter % 100 === 0 ) {
                gc_collect_cycles();
            }
            self::logDebugMem();
            $oldTrace = self::$_logTrace; self::$_logTrace = true;
            self::endTrace('ArticlesHandler::doHandle.loop');
            self::$_logTrace = $oldTrace;

            // ###############################################
            if ( $this->_DO_ONLY_THAT_SKU !== null )
                return;
            // ###############################################
        }
    }

    private function updateChangeableBaseData ( $sku, \com\schrack\queue\protobuf\Message\Article $protoArticle, Schracklive_SchrackCatalog_Model_Product $magentoProduct, $packagetype ) {
        self::beginTrace('ArticlesHandler::updateChangeableBaseData');
        $magentoProduct->setStatus(Mage_Catalog_Model_Product_Status::STATUS_ENABLED);
        if ( $magentoProduct->getName() && $protoArticle->getDescription && $magentoProduct->getName() != $protoArticle->getDescription() ) {
            $this->addRedirectRename($magentoProduct->getName(),$protoArticle->getDescription(),null,$sku);
        }
        $this->setDynamicTextAttribute($magentoProduct,'name','Name',$protoArticle->getDescription());
        $this->setDynamicTextAttribute($magentoProduct,'description','Description',$protoArticle->getDescription());
        $this->setDynamicTextAttribute($magentoProduct,'short_description','Short description',$protoArticle->getDescription());
        $this->setDynamicTextAttribute($magentoProduct,'schrack_detail_description_title','Detailed description title',$protoArticle->getDetaildescriptionTitle());
        $this->setDynamicTextAttribute($magentoProduct,'schrack_detail_description','Detailed description',$protoArticle->getDetaildescription());
        $this->setDynamicTextAttribute($magentoProduct,'schrack_long_text_addition','Long text addition',$protoArticle->getLongtextaddition());
        $magentoProduct->setPrice($this->getValIf($protoArticle->hasWebprice(),$protoArticle->getWebprice(),999999));
        $magentoProduct->setSchrackPriceunit($this->getValIf($protoArticle->hasPriceunit(),$protoArticle->getPriceunit(),1));
        $magentoProduct->setSchrackQtyunit($this->getValIf($protoArticle->hasQuantityunit(),$protoArticle->getQuantityunit(),''));
        $magentoProduct->setSchrackQtyunitId($this->getValIf($protoArticle->hasQuantityunitid(),$protoArticle->getQuantityunitid(),''));
        $magentoProduct->setSchrackStsMinOrderQty($this->getValIf($protoArticle->hasMinimumquantity(),$protoArticle->getMinimumquantity(),1));
        self::logDebug('Quantityunit set to ' . $magentoProduct->getSchrackQtyunit());
        $subArticles = $protoArticle->getSubarticleids();
        if ( $subArticles && count($subArticles) > 0 ) {
            $subArticles = implode(';',$subArticles);
        } else {
            $subArticles = '';
        }
        $unmanageableStocks = $protoArticle->getUnmanageableStockNumbers();
        if ($unmanageableStocks) {
            $unmanageableStocks = implode(';', $unmanageableStocks);
        } else {
            $unmanageableStocks = '';
        }
        $magentoProduct->setSchrackStsSubArticleSkus($subArticles);
        $magentoProduct->setSchrackStsUnmanagedStocks($unmanageableStocks);
        $magentoProduct->setSchrackIsCable($subArticles > '');
        $magentoProduct->setSchrackStsMainArticleSku($this->getValIf($protoArticle->hasMainarticleid(),$protoArticle->getMainarticleid(),''));

        $magentoProduct->setSchrackStsIsHighAvailable($protoArticle->getHighavailability());
        $magentoProduct->setSchrackStsIsForcedAccessoryVal(0);
        if ( $protoArticle->hasAccessoriestype() ) {
            switch ( $protoArticle->getAccessoriestype() ) {
                case Message\Article\AccessoriesTypes::MANUAL_YES :
                    $magentoProduct->setSchrackStsIsForcedAccessoryVal(1);
                case Message\Article\AccessoriesTypes::CALC_YES :
                    $magentoProduct->setSchrackStsIsaccessory(1);
                    break;
                case Message\Article\AccessoriesTypes::MANUAL_NO :
                    $magentoProduct->setSchrackStsIsForcedAccessoryVal(0);
                case Message\Article\AccessoriesTypes::CALC_NO :
                    $magentoProduct->setSchrackStsIsaccessory(0);
                    break;
            }
        } else {
            $magentoProduct->setSchrackStsIsaccessory($this->getValIf($protoArticle->hasIsaccessory(),$protoArticle->getIsaccessory(),0));
        }
        $magentoProduct->setSchrackStsShowinventory($this->getValIf($protoArticle->hasShowinventory(),$protoArticle->getShowinventory(),1));
        $magentoProduct->setSchrackWwsRanking($this->getValIf($protoArticle->hasRanking() && intval($protoArticle->getRanking()) > 0,$protoArticle->getRanking(),999999));
        $magentoProduct->setSchrackStsIsDownload($this->getValIf($protoArticle->hasDownloadable() && intval($protoArticle->getDownloadable()) > 0,$protoArticle->getDownloadable(),0));
        $magentoProduct->setSchrackStsGreenStamp($this->getValIf($protoArticle->hasEag() && strlen($protoArticle->getEag()) > 0,$protoArticle->getEag(),''));
        $magentoProduct->setSchrackStsValidUntil($protoArticle->getValidto());

        $ean = $protoArticle->getEan();
        if ( isset($ean) ) {
            $magentoProduct->setSchrackEan($ean);
        }
        else {
            self::log("Product $sku has no EAN!");
            $magentoProduct->setSchrackEan('');
        }

        $mainVpeType = $this->handleVPEs($protoArticle,$magentoProduct);

        $magentoProduct->setSchrackStsStatusglobal($this->getValIf($protoArticle->hasStatusglobal(),$protoArticle->getStatusglobal(),'std'));
        $statusLocal2store = $this->getValIf($protoArticle->hasStatuslocal(),$protoArticle->getStatuslocal(),'std');
        $forSale2store = $this->getValIf($protoArticle->hasForsale(),$protoArticle->getForsale(),false) ? '1' : '0';
        if ( $protoArticle->getAction() === self::ACTION_DELETE && $statusLocal2store !== 'tot' ) {
            $statusLocal2store = 'strategic_no';
        } else if ( ! $mainVpeType && $statusLocal2store !== 'tot' ) {
            $statusLocal2store = 'unsaleable';
        }

        if ( $statusLocal2store === 'tot' || $statusLocal2store === 'strategic_no' || $statusLocal2store === 'unsaleable' ) {
            $magentoProduct->setVisibility(Mage_Catalog_Model_Product_Visibility::VISIBILITY_IN_SEARCH);
        } else {
            $magentoProduct->setVisibility(Mage_Catalog_Model_Product_Visibility::VISIBILITY_BOTH);
        }

        self::logDebug("statusLocal: got: {$protoArticle->getStatuslocal()} , storing: $statusLocal2store");
        $magentoProduct->setSchrackStsStatuslocal($statusLocal2store);

        if ( $protoArticle->hasBestellNotAvailableLocalStock() && ! $protoArticle->getBestellNotAvailableLocalStock() ) {
            $magentoProduct->setSchrackStsNotAvailable(0);
        } else {
            $magentoProduct->setSchrackStsNotAvailable(1);
        }

        if ( $protoArticle->hasWebshopSaleable() && ! $protoArticle->getWebshopSaleable() ) {
            $magentoProduct->setSchrackStsWebshopSaleable(0);
        } else {
            $magentoProduct->setSchrackStsWebshopSaleable(1);
        }

        if ( $protoArticle->hasManagedinventory() ) {
            $magentoProduct->setSchrackStsManagedInventory($protoArticle->getManagedinventory());
            $this->markAttributeAsHandled('schrack_sts_managed_inventory');
        }
        $magentoProduct->setSchrackStsForsale($forSale2store);
        if ( $protoArticle->hasPceve() ) {
            $magentoProduct->setSchrackQtyPerPackagingUnit(intval($protoArticle->getPceve()));
        } else {
            $magentoProduct->setSchrackQtyPerPackagingUnit(null);
        }
        $magentoProduct->setSchrackSortiment($protoArticle->getSortiment());
        if ( $protoArticle->hasBatchsize() ) {
            $magentoProduct->setSchrackStsBatchSize($protoArticle->getBatchsize());
        } else {
            $magentoProduct->setSchrackStsBatchSize(1);
        }
        $magentoProduct->setSchrackStsMainSupplier($protoArticle->getMainsupplier());
        if ( is_object($protoArticle->getProductgroup()) ) {
            $magentoProduct->setSchrackProductgroup($protoArticle->getProductgroup()->getId());
        } else {
            $magentoProduct->setSchrackProductgroup('');
        }
        $asciiUrlString = $this->mkAsciiUrlString($protoArticle->getDescription());
        $asciiUrlStringWithSku = $asciiUrlString . '-' . strtolower(rtrim($sku,'-'));
        $magentoProduct->setUrlKey($asciiUrlStringWithSku);
        $magentoProduct->setSchrackStsPrintedManufacturerNumber($protoArticle->getPrintedmanufacturernumber());
        $this->setDynamicTextAttribute($magentoProduct,'schrack_url_key_without_sku','URL Key Without SKU',$asciiUrlString);
        // Set Special Transport
        if ($protoArticle->hasSpecialtransport()) {
            $magentoProduct->setSchrackStsSpecialTransport($protoArticle->getSpecialtransport() === true ? 1 : 0);
        }
        // Set Transport Rate PV
        if ($protoArticle->hasTransportratePv()) {
            $magentoProduct->setSchrackStsTransportRatePv($protoArticle->getTransportratePv() === true ? 1 : 0);
        }
        // Set Transport Rate Battery
        if ($protoArticle->hasTransportrateBattery()) {
            $magentoProduct->setSchrackStsTransRateBat($protoArticle->getTransportrateBattery() === true ? 1 : 0);
        }
        // Set Plus Delivery Time
        if ($protoArticle->hasPlusdeliverytime()) {
            $magentoProduct->setSchrackStsPlusDeliTime($protoArticle->getPlusdeliverytime());
        }
        self::endTrace('ArticlesHandler::updateChangeableBaseData');
    }

    private function getValIf ( $has, $val, $default ) {
        if ( $has ) {
            return $val;
        }
        return $default;
    }

    private function readFacetDefs ( Message &$importMsg ) {
        self::beginTrace('ArticlesHandler::readFacetDefs');
        /* @var $facetDefinition \com\schrack\queue\protobuf\Message\FacetDefinition */
        foreach ( $importMsg->getFacetdefinitions() as $facetDefinition ) {
            $name = $facetDefinition->getName();
            $code = $this->name2code($name);
            $values = $facetDefinition->getValues();
            $isMulti = $values === 'Multi';
            if ( ! isset($this->_selectFacets[$code]) ) {
                $this->_selectFacets[$code] = $isMulti;
            }
        }

        // changing attribute type from singel to multi or the other way round if neccessary:
        $productAttrs = Mage::getResourceModel('catalog/product_attribute_collection');
        /* @var $productAttr Mage_Catalog_Model_Resource_Eav_Attribute */
        foreach ( $productAttrs as $productAttr ) {
            $code = $productAttr->getAttributeCode();
            if (   substr($code, 0, 8) === 'schrack_'             // we do not touch standard magento things,
                && !in_array($code, self::$UNDYNAMIC_SCHRACK_ATTRIBUTES) )   // and not the not auto-created ones
            {
                if ( $productAttr->getFrontendInput() === 'multiselect' && in_array($productAttr->getAttributeCode(),$this->hugeAttributes) ) {
                    $this->multi2single($productAttr);
                }
                else if ( isset($this->_selectFacets[$code]) ) {
                    if ( $this->_selectFacets[$code] && $productAttr->getFrontendInput() !== 'multiselect' ) {
                        $this->single2multi($productAttr);
                    } else if ( ! $this->_selectFacets[$code] && $productAttr->getFrontendInput() === 'multiselect' ) {
                        $this->multi2single($productAttr);
                    }
                }
            }
        }
        self::endTrace('ArticlesHandler::readFacetDefs');
    }

    private function single2multi ( Mage_Catalog_Model_Resource_Eav_Attribute $attr ) {
        self::beginTrace('ArticlesHandler::single2multi');
        $attrCode = $attr->getAttributeCode();
        self::log("single2multi: " . $attrCode);
        $attrId = $attr->getId();
        $this->_writeConnection->beginTransaction();

        try {
            $sql = "DROP TABLE IF EXISTS tmp, tmp2;";
            $this->_writeConnection->query($sql);
            $sql = "CREATE TABLE tmp (option_id int(10) unsigned auto_increment, value varchar(255), UNIQUE(option_id));";
            $this->_writeConnection->query($sql);
            $sql = "CREATE TABLE tmp2 (entity_id int(10) unsigned, option_id int(10) unsigned, UNIQUE(entity_id,option_id));";
            $this->_writeConnection->query($sql);
            $sql = "SELECT max(option_id) + 10 FROM eav_attribute_option;";
            $startAI = $this->_readConnection->fetchOne($sql);
            $sql = "ALTER TABLE tmp AUTO_INCREMENT = $startAI;";
            $this->_writeConnection->query($sql);
            $sql = "INSERT INTO tmp SELECT NULL, value FROM catalog_product_entity_varchar WHERE attribute_id = $attrId AND NOT value like '%;%' GROUP BY value;";
            $this->_writeConnection->query($sql);
            $sql = "INSERT INTO tmp2 SELECT DISTINCT attr.entity_id, t.option_id FROM catalog_product_entity_varchar attr INNER JOIN tmp t ON attr.value = t.value;";
            $this->_writeConnection->query($sql);
            $sql = "INSERT INTO eav_attribute_option SELECT option_id, $attrId, 0 FROM tmp;";
            $this->_writeConnection->query($sql);
            $sql = "INSERT INTO eav_attribute_option_value SELECT NULL, option_id, {$this->_storeId}, value FROM tmp;";
            $this->_writeConnection->query($sql);
            $sql = "UPDATE catalog_product_entity_varchar attr JOIN tmp2 t2 ON attr.entity_id = t2.entity_id JOIN tmp t ON t.option_id = t2.option_id SET attr.value = t.option_id WHERE attr.attribute_id = $attrId AND attr.value = t.value;";
            $this->_writeConnection->query($sql);

            $sql = "SELECT entity_id, value FROM catalog_product_entity_varchar WHERE attribute_id = $attrId AND value like '%;%';";
            $multiIdsAndVals = $this->_readConnection->fetchAll($sql);
            $createdOptions = array();
            foreach ( $multiIdsAndVals as $row ) {
                $id = $row['entity_id'];
                $val = $row['value'];
                $vals = explode(';',$val);
                $newVals = array();
                foreach ( $vals as $v ) {
                    if ( ! isset($createdOptions[$v]) ) {
                        $sql = "INSERT INTO eav_attribute_option VALUES(NULL, $attrId, 0);";
                        $this->_writeConnection->query($sql);
                        $sql = "SELECT max(option_id) FROM eav_attribute_option;";
                        $createdOptions[$v] = $this->_writeConnection->fetchOne($sql);
                        $sql = "INSERT INTO eav_attribute_option_value VALUES(NULL, {$createdOptions[$v]}, {$this->_storeId}, '$v');";
                        $this->_writeConnection->query($sql);
                    }
                    $newVals[] = $createdOptions[$v];
                }
                $newVal = implode(',',$newVals);
                $sql = "UPDATE catalog_product_entity_varchar SET `value` = '$newVal' WHERE entity_id = $id AND attribute_id = $attrId";
                $this->_writeConnection->query($sql);
            }

            $sql = "DROP TABLE IF EXISTS tmp, tmp2;";
            $this->_writeConnection->query($sql);
        } catch ( Exception $ex ) {
            $this->_writeConnection->rollback();
            self::endTrace('ArticlesHandler::single2multi');
            throw $ex;
        }

        /* @var $setup Mage_Catalog_Model_Resource_Eav_Mysql4_Setup */
        $setup = Mage::getResourceModel('catalog/setup', 'core_setup');
        $setup->updateAttribute(4,$attr->getId(),array('frontend_input' => 'multiselect'));

        $this->_writeConnection->commit();

        self::endTrace('ArticlesHandler::single2multi');
    }

    private function multi2single ( Mage_Catalog_Model_Resource_Eav_Attribute $attr ) {
        self::beginTrace('ArticlesHandler::multi2single');
        $attrCode = $attr->getAttributeCode();
        self::log("multi2single: " . $attrCode);
        $attrId = $attr->getId();
        $this->_writeConnection->beginTransaction();

        try {
            $sql = "SELECT attr.entity_id, attr.value FROM catalog_product_entity_varchar attr"
                 . " JOIN eav_attribute eav ON attr.attribute_id = eav.attribute_id"
                 . " WHERE eav.attribute_code = '$attrCode'"
                 . " AND value LIKE '%,%';";
            $multiIdsAndVals = $this->_readConnection->fetchAll($sql);

            $sql = "DROP TABLE IF EXISTS tmp;";
            $this->_writeConnection->query($sql);
            $sql = "CREATE TABLE tmp (option_id int(10) unsigned, value varchar(255), UNIQUE(option_id)) SELECT opt.option_id, optval.value"
                 . " FROM eav_attribute_option_value optval"
                 . " JOIN eav_attribute_option opt ON opt.option_id = optval.option_id"
                 . " JOIN eav_attribute eav ON eav.attribute_id = opt.attribute_id"
                 . " WHERE store_id = {$this->_storeId}"
                 . " AND eav.attribute_code = '$attrCode';";
            $this->_writeConnection->query($sql);

            $sql = "UPDATE catalog_product_entity_varchar attr"
                 . " SET attr.value = (SELECT value FROM tmp WHERE option_id = attr.value)"
                 . " WHERE NOT value LIKE '%,%'"
                 . " AND attr.attribute_id = $attrId;";
            $this->_writeConnection->query($sql);

            foreach ( $multiIdsAndVals as $row ) {
                $id = $row['entity_id'];
                $val = $row['value'];
                $vals = explode(',',$val);
                $newVals = array();
                foreach ( $vals as $k ) {
                    $sql = "SELECT value FROM tmp WHERE option_id = $k";
                    $v = $this->_readConnection->fetchOne($sql);
                    $newVals[] = $v;
                }
                $newVal = implode(';',$newVals);
                $sql = "UPDATE catalog_product_entity_varchar SET value = '$newVal' WHERE entity_id = $id AND attribute_id = $attrId;";
                $this->_writeConnection->query($sql);
            }

            $sql = "DELETE FROM eav_attribute_option_value WHERE option_id IN (SELECT option_id FROM eav_attribute_option WHERE attribute_id = $attrId);";
            $this->_writeConnection->query($sql);
            $sql = "DELETE FROM eav_attribute_option WHERE attribute_id = $attrId;";
            $this->_writeConnection->query($sql);

            $sql = "DROP TABLE IF EXISTS tmp;";
            $this->_writeConnection->query($sql);
        } catch ( Exception $ex ) {
            $this->_writeConnection->rollback();
            self::endTrace('ArticlesHandler::multi2single');
            throw $ex;
        }

        $setup = Mage::getResourceModel('catalog/setup', 'core_setup');
        $setup->updateAttribute(4,$attrId,array('frontend_input' => 'text'));

        $this->_writeConnection->commit();

        self::endTrace('ArticlesHandler::multi2single');
    }

    private function handleFacetGroups ( \com\schrack\queue\protobuf\Message\Article $protoArticle, Schracklive_SchrackCatalog_Model_Product $magentoProduct ) {
        self::beginTrace('ArticlesHandler::handleFacetGroups');
        /* @var $facetGroup \com\schrack\queue\protobuf\Message\Article\FacetGroup */
        foreach ( $protoArticle->getFacetgroupsList() as $facetGroup ) {
            // TODO: store group as well
            /* @var $facet \com\schrack\queue\protobuf\Message\Article\Facet */
            foreach ( $facetGroup->getFacets() as $facet ) {
                $id = $facet->getId();
                $idlc = strtolower($id);
                if ( $idlc === 'ean' || $idlc === 'prodgrp' || $idlc === 'vklw' ||$idlc === 'preiseinheit' || $idlc === 'mengeneinheit' ) { // TODO: remove that workaround for double data occurence
                    continue;
                }
                $values = $facet->getValue();
                if ( $idlc === 'vpe' ) { // seems to be no longer existing
                    $magentoProduct->setSchrackPackingunit($values[0]);
                    $this->markAttributeAsHandled('schrack_packingunit');
                    continue;
                }
                if ( $facet->hasQuantityunit() ) {
                    $unit = $facet->getQuantityunit();
                    if ( ! empty($unit) ) {
                        $ll = count($values);
                        for ( $i = 0; $i < $ll; $i++ ) {
                            $values[$i] = $values[$i] . $unit;
                        }
                    }
                }
                $text = $facet->getText();
                $attrCode = $this->name2code($id,$magentoProduct);
                if ( (isset($this->_selectFacets[$attrCode]) && ! $this->_selectFacets[$attrCode]) ) {
                    $this->setDynamicTextAttribute($magentoProduct,$attrCode,$text,$values);
                } else {
                    $this->setDynamicMultiselectAttribute($magentoProduct,$attrCode,$text,$values);
                }
                if ( $attrCode == 'schrack_hersteller' ) {
                    $magentoProduct->setSchrackMainProducer($values[0]);
                } else if ( $attrCode == 'schrack_aktion' ) {
                    self::logDebug("Setting schrack_sts_promotion_label to value '{$values[0]}'");
                    $magentoProduct->setSchrackStsPromotionLabel($values[0]);
                    $this->markAttributeAsHandled('schrack_sts_promotion_label');
                }
                $this->markAttributeAsHandled($attrCode);
            }
        }
        self::endTrace('ArticlesHandler::handleFacetGroups');
    }

    private function handleKeywords ( \com\schrack\queue\protobuf\Message\Article $protoArticle, Schracklive_SchrackCatalog_Model_Product $magentoProduct ) {
        self::beginTrace('ArticlesHandler::handleKeywords');
        $kwTxt = $this->null2emptyString($protoArticle->getKeywords());
        $magentoProduct->setMetaKeyword($kwTxt);
        $kwTxt = $this->null2emptyString($protoArticle->getForeign());
        $magentoProduct->setSchrackKeywordForeign($kwTxt);
        $kwTxt = $this->null2emptyString($protoArticle->getForeignHidden());
        $magentoProduct->setSchrackKeywordForeignHidden($kwTxt);
        self::endTrace('ArticlesHandler::handleKeywords');
    }

    private function handleMediadata ( \com\schrack\queue\protobuf\Message\Article $protoArticle, Schracklive_SchrackCatalog_Model_Product $magentoProduct ) {
        self::beginTrace('ArticlesHandler::handleMediadata');

        $res = array();

        if ( $magentoProduct->getId() ) {
            $magentoProduct->cleanAttachments();
        }

        /* @var $mediaData \com\schrack\queue\protobuf\Message\MediaData */
        foreach ( $protoArticle->getMediadataList() as $mediaData ) {
            $attachment = Mage::getModel('schrackcatalog/attachment');
            $attachment->setFiletype($mediaData->getType());
            $attachment->setLabel(trim($mediaData->getDescription()));
            $attachment->setUrl(trim($mediaData->getUrl()));
            self::logDebug('adding attachment: type = ' . $attachment->getFiletype() . ', label = ' . $attachment->getLabel() . ', url = ' . $attachment->getUrl());
            $res[] = $attachment;
        }

        self::endTrace('ArticlesHandler::handleMediadata');
        return $res;
    }

    private function handleSubstitutes ( \com\schrack\queue\protobuf\Message\Article $protoArticle, Schracklive_SchrackCatalog_Model_Product $magentoProduct ) {
        self::beginTrace('ArticlesHandler::handleSubstitutes');
        $val = '';
        foreach ( $protoArticle->getSubstitutesList() as $substitueStr ) {
            $val .= $substitueStr;
            $val .= ';';
        }
        $magentoProduct->setSchrackSubstitute($val);
        $this->markAttributeAsHandled('schrack_substitute');
        self::endTrace('ArticlesHandler::handleSubstitutes');
    }

    private function handleScales ( \com\schrack\queue\protobuf\Message\Article $protoArticle, Schracklive_SchrackCatalog_Model_Product $magentoProduct ) {
        // foreach ( $protoArticle->getScalesList() as $scale )...
        // nothing todo yet - comes from WWS...
    }

    private function handleAccessories ( \com\schrack\queue\protobuf\Message\Article $protoArticle, Schracklive_SchrackCatalog_Model_Product $magentoProduct ) {
        if ( $protoArticle->hasAccessoriesnecessary() ) {
            $this->setDynamicTextAttribute($magentoProduct, 'schrack_accessories_necessary', 'Accessories necessary', implode(';', array_unique($protoArticle->getAccessoriesnecessaryList())));
        } else {
            $this->setDynamicTextAttribute($magentoProduct, 'schrack_accessories_necessary', 'Accessories necessary', '');
        }
        $this->markAttributeAsHandled('schrack_accessories_necessary');
        if ( $protoArticle->hasAccessoriesoptional() ) {
            $this->setDynamicTextAttribute($magentoProduct, 'schrack_accessories_optional', 'Accessories optional', implode(';', array_unique($protoArticle->getAccessoriesoptionalList())));
        } else {
            $this->setDynamicTextAttribute($magentoProduct, 'schrack_accessories_optional', 'Accessories optional', '');
        }
        $this->markAttributeAsHandled('schrack_accessories_optional');
    }

    private function handleDefaultGroup ( \com\schrack\queue\protobuf\Message\Article $protoArticle, Schracklive_SchrackCatalog_Model_Product $magentoProduct ) {
        $catEnrtityId = $catSchrackId = null;
        if ( $protoArticle->hasMainsection() ) {
            $catSchrackId = $protoArticle->getMainsection();
            $categoryMap = Schracklive_SchrackCatalog_Model_Category::getIdMap();
            $catEnrtityId = $categoryMap[$catSchrackId];
        }
        $magentoProduct->setSchrackMainCategoryId($catSchrackId);
        $magentoProduct->setSchrackMainCategoryEid($catEnrtityId);
    }

    private function handleVPEs ( \com\schrack\queue\protobuf\Message\Article $protoArticle, Schracklive_SchrackCatalog_Model_Product $magentoProduct ) {
        $mainVpeType = $mainVpeSize = null;
        $eans = array();
        if ( $protoArticle->hasVpes() ) {
            $data = array();
            foreach ( $protoArticle->getVpesList() as $vpes ) {
                $name = $vpes->getVpe();
                $valss = array();
                $multiplier = 1;
                foreach ( $vpes->getVpesList() as $vpe ) {
                    $vals = array();
                    $vals['quantity']    = $vpe->getQuantity();
                    $vals['salable']     = $vpe->getSalable();
                    $vals['deliverable'] = $vpe->getConveyable();
                    $vals['type']        = $vpe->getType();
                    $valss[] = $vals;
                    if ( $vpe->getConveyable() && $mainVpeType == null ) {
                        $mainVpeType = $vpe->getType();
                        $mainVpeSize = $vpe->getQuantity() * $multiplier;
                    }
                    $multiplier *= $vals['quantity'];
                    if ( $vpe->hasEan() && is_string($ean = $vpe->getEan()) && $ean != '' ) {
                        $eans[] = $ean;
                    }
                }
                $data[$name] = $valss;
            }
            $str = serialize($data);
            $magentoProduct->setData('schrack_vpes',$str);
            $this->markAttributeAsHandled('schrack_vpes');
            $magentoProduct->setSchrackStsMainVpeType($mainVpeType);
            $magentoProduct->setSchrackStsMainVpeSize($mainVpeSize);
        }
        if ( count($eans) > 0 ) {
            $mainEan = $magentoProduct->getSchrackEan();
            if ( ! empty($mainEan) ) {
                array_unshift($eans,$mainEan);
            }
            $magentoProduct->setSchrackEan(implode(chr(31),$eans));
        }
        return $mainVpeType;
    }

    private function setDynamicTextAttribute ( Schracklive_SchrackCatalog_Model_Product $magentoProduct, $code, $label, $value, $type = "text", $setCode = Schracklive_Schrack_Helper_Data::SCHRACK_ATTRIBUTESET_NAME ) {
        self::beginTrace('ArticlesHandler::setDynamicTextAttribute');
        $this->ensureAttribute($setCode,$magentoProduct,$code,$label);
        if ( is_array($value) ) {
            if ( count($value) === 1 ) {
                $value = $value[0];
            } else {
                $value = implode(';',$value);
            }
        }
        if ( $value == null ) {
            self::logDebug("clear text attr '$code'");
            if ( ! $this->clearAttribute($magentoProduct,$code) ) {
                $magentoProduct->setData($code,null);
            }
        } else {
            self::logDebug("set text attr '$code' to val '$value'");
            $magentoProduct->setData($code, $value);
        }
        self::endTrace('ArticlesHandler::setDynamicTextAttribute');
    }

    private function setDynamicMultiselectAttribute ( Schracklive_SchrackCatalog_Model_Product $magentoProduct, $code, $label, $values, $setCode = Schracklive_Schrack_Helper_Data::SCHRACK_ATTRIBUTESET_NAME ) {
        self::beginTrace('ArticlesHandler::setDynamicMultiselectAttribute');
        /* @var $attribute Mage_Catalog_Model_Resource_Eav_Attribute */
        self::beginTrace('ArticlesHandler::setDynamicMultiselectAttribute-01');
        $attribute = $this->ensureAttribute($setCode,$magentoProduct,$code,$label,'multiselect',0,$values);
        self::endTrace('ArticlesHandler::setDynamicMultiselectAttribute-01');
        self::beginTrace('ArticlesHandler::setDynamicMultiselectAttribute-02');
        $source = $attribute->getSource(); /* @var $source Mage_Eav_Model_Entity_Attribute_Source_Table */
        self::endTrace('ArticlesHandler::setDynamicMultiselectAttribute-02');
        if ( $source instanceof Mage_Eav_Model_Entity_Attribute_Source_Interface ) {
            if ( ! isset($this->_facetOptionsCache[$code]) ) {
                self::beginTrace('ArticlesHandler::setDynamicMultiselectAttribute-03');
                $options = $source->getAllOptions(true, true);
                self::endTrace('ArticlesHandler::setDynamicMultiselectAttribute-03');
                $this->_facetOptionsCache[$code] = $options;
            }
        }
        $options = $this->_facetOptionsCache[$code];
        if ( ! $options || ! is_array($options) ) {
            $msg = "no options for code {$code} found!";
            self::log($msg);
            throw new Exception($msg);
        }
        $selected = array();
        self::beginTrace('ArticlesHandler::setDynamicMultiselectAttribute-04');
        foreach ( $values as $value ) {
            $found = false;
            foreach ( $options as $option ) {
                if ( $value === $option['label'] ) {
                    $selected[] = $option['value'];
                    $found = true;
                    break;
                }
            }
            if ( ! $found ) {
                self::logDebug("adding now option '$value' to attribute '".$code.','.$label."'");
                $option = $this->createNewOption($attribute->getId(),$value);
                $selected[] = $option['value'];
                $options[] = $option;
                $this->_facetOptionsCache[$code][] = $option;
                self::logDebug("new option id = '".$option['value']."'");
            }
        }
        self::endTrace('ArticlesHandler::setDynamicMultiselectAttribute-04');

        $selected = array_unique($selected);
        $prodValue = implode(',', $selected);

        $values = implode(',',$values);
        self::logDebug("set multisel attr '$code' to val '$prodValue' ($values)");
        $magentoProduct->setData($code,$prodValue);

        self::endTrace('ArticlesHandler::setDynamicMultiselectAttribute');
    }

    private function ensureAttribute ( $setCode, $magentoProduct, $code, $label, $type = "text", $position = 20, $options = array() ) {
        self::beginTrace('ArticlesHandler::ensureAttribute');
        /* @var $attribute Mage_Catalog_Model_Resource_Eav_Attribute */
        $attribute = $magentoProduct->getResource()->getAttribute($code);
        if ( ! $attribute ) {
            try {
                self::logDebug("creating now attribute '$code','$label' (type = '$type')" );
                $attrSetId = $this->getAttributeSetId($setCode);
                $attrGroup = $this->getAttributGroup($attrSetId);
                $attribute = $this->_productAssistent->createAttribute($code,$label,$attrGroup,$attrSetId,$type,$position,$options);
                $this->_attributeCreated = true;
            }
            catch ( Mage_Core_Exception  $ex ) {
                self::log("create of attribute '".$code.','.$label."' failed.");
                throw $ex;
            }
            // TODO: Remove workaround, why does Magento not return the same objects after save as for load?
            $attribute = $this->_productAssistent->getAttribute($code);
        } else {
            if ( $attribute->getFrontendLabel() !== $label ) {
                self::logDebug("renaming now attribute '".$code."' from '".$attribute->getFrontendLabel()."' to '".$label."'");
                $attribute->setFrontendLabel($label);
                $attribute->save();
            }
        }
        self::endTrace('ArticlesHandler::ensureAttribute');
        return $attribute;
    }

    private function createNewOption ( $attributeId, $value ) {
        $storeId = $this->_storeId;
        $optionId = -1;
        $value = addslashes($value);
        $this->_writeConnection->beginTransaction();
        try {
            $sql = "INSERT INTO eav_attribute_option SET attribute_id = $attributeId;";
            $this->_writeConnection->query($sql);
            $sql = "SELECT option_id FROM eav_attribute_option ORDER BY option_id DESC LIMIT 1";
            $optionId = $this->_writeConnection->fetchOne($sql);
            if ( intval($optionId) < 1 ) {
                throw new Exception("Error while creating new option (attributeId = $attributeId, value = $value) !");
            }
            $sql = "INSERT INTO eav_attribute_option_value SET option_id = $optionId, store_id = $storeId, value = '$value';";
            $this->_writeConnection->query($sql);
            $sql = "INSERT INTO eav_attribute_option_value SET option_id = $optionId, store_id = 0, value = '$value';"; // ensure bloody necessary store 0 default value
            $this->_writeConnection->query($sql);
            $this->_writeConnection->commit();
        } catch ( Exception $ex ) {
            $this->_writeConnection->rollback();
        }
        return array(
            'label' => $value,
            'value' => $optionId
        );
    }

    protected function removeAlreadyDeletedFromSchrack2MagentoIdMap ( &$map ) {
        self::beginTrace('ArticlesHandler::removeAlreadyDeletedFromSchrack2MagentoIdMap');

        $product = Mage::getModel('catalog/product');
        $collection = $product->getCollection();
        $collection->getSelect()->reset(Zend_Db_Select::COLUMNS)->columns(array('sku'));
        $collection->addAttributeToFilter('status',array('eq' => Mage_Catalog_Model_Product_Status::STATUS_DISABLED));
        foreach ( $collection as $product ) {
            $schrackId = $product->getSku();
            unset($map[$schrackId]);
        }

        self::endTrace('ArticlesHandler::removeAlreadyDeletedFromSchrack2MagentoIdMap');
    }


    protected function delete ( $magentoId ) {
        self::beginTrace('ArticlesHandler::delete');
        // wee do not longer delete any products in webshop
        self::logDebug("ERROR: illegal try to delete product with ID $magentoId !");
        self::endTrace('ArticlesHandler::delete');
    }

    public function getSchrack2MagentoIdMap () {
        self::beginTrace('ArticlesHandler::getSchrack2MagentoIdMap');

        if ( ! self::$_staticIdMap ) {
            self::log('building now article id map...');
            $entityTypeId = Mage::getModel('eav/entity')->setType('catalog_product')->getTypeId();
            $query = "SELECT sku, entity_id FROM catalog_product_entity";
            $results = $this->_readConnection->fetchAll($query);
            self::$_staticIdMap = array();
            foreach ( $results as $rec ) {
                $sku = $rec['sku'];
                $entityId = $rec['entity_id'];
                self::$_staticIdMap[$sku] = $entityId;
            }
            self::log('...article id map done');
        }

        self::endTrace('ArticlesHandler::getSchrack2MagentoIdMap');
        return self::$_staticIdMap;
    }

    private function deleteArticle ( $product ) {
        /* @var $product Schracklive_SchrackCatalog_Model_Product */
        self::beginTrace('ArticlesHandler::deleteArticle');
        if ( $product->getStatus() != Mage_Catalog_Model_Product_Status::STATUS_DISABLED || count($product->getCategoryIds()) > 0 ) {
            self::logProgressChar('d');
            self::logDebug('deactivating article ' . $product->getSku());
            $product->setStatus(Mage_Catalog_Model_Product_Status::STATUS_DISABLED);
            $product->setCategoryIds(array());
            $product->save();
        }
        else {
            self::logProgressChar('.');
        }
        self::endTrace('ArticlesHandler::deleteArticle');
    }

    private function getAttributGroup ( $setId ) {
        self::beginTrace('ArticlesHandler::getAttributGroup');
        if ( ! isset($this->_attributeGroups[$setId]) ) {
            $groups = Mage::getModel('eav/entity_attribute_group')->getResourceCollection()->setAttributeSetFilter($setId)->load()->toArray();
            $this->_attributeGroups[$setId] = $groups['items'][0]["attribute_group_id"];
        }
        self::endTrace('ArticlesHandler::getAttributGroup');
        return $this->_attributeGroups[$setId];
    }

    private function getAttributeSetId ( $name, $createIfNeccesary = false ) {
        self::beginTrace('ArticlesHandler::getAttributeSetId');
        $setId = 0;
        if ( isset($this->_attributeSets[$name]) && isset($this->_attributeSets[$name]['id']) ) {
            $setId = $this->_attributeSets[$name]['id'];
        }
        if ( ! $setId ) {
            $setId = $this->_productAssistent->getAttributeSetId($name);
        }
        if ( ! $setId ) {
            if ( ! $createIfNeccesary ) {
                throw new Exception("Attribute '{$name}' not found.");
            }
            $setId = $this->_productAssistent->createAttributeSet($name);
            $this->_attributeSets[$name] = array(
                'id' => $setId,
                'attributes' => array(),
            );
        }
        self::endTrace('ArticlesHandler::getAttributeSetId');
        return $setId;
    }

    private function prepareUnhandledAttributes ( Schracklive_SchrackCatalog_Model_Product $product ) {
        self::beginTrace('ArticlesHandler::prepareUnhandledAttributes');
        $this->_unhandledAttributes = array_keys($product->getData());
        $toRemoveNdx = array();
        foreach ( $this->_unhandledAttributes as $ndx => $name ) {
            if (   $name === 'schrack_sortiment'
                || $name === 'schrack_productgroup'
                || $name === 'schrack_ean'
                || $name === 'schrack_catalognr'
                || $name === 'schrack_url_key_without_sku'
                || $name === 'schrack_sts_showinventory'
                || $name === 'schrack_packingunit'
                || $name === 'schrack_wws_ranking'
                || $name === 'schrack_keyword_foreign'
                || $name === 'schrack_keyword_foreign_hidden'
                || $name === 'schrack_sts_valid_until'
                || $name === 'schrack_is_cable'
                || $name === 'schrack_sts_main_article_sku'
                || $name === 'schrack_sts_sub_article_skus'
                || $name === 'schrack_sts_main_vpe_type'
                || $name === 'schrack_sts_main_vpe_size'
                || $name === 'schrack_detail_description_title'
                || $name === 'schrack_detail_description'
                || $name === 'schrack_sts_statusglobal'
                || $name === 'schrack_sts_statuslocal'
                || $name === 'schrack_sts_showinventory'
                || $name === 'schrack_sts_isaccessory'
                || $name === 'schrack_sts_is_forced_accessory_val'
                || $name === 'schrack_sts_forsale'
                || $name === 'schrack_long_text_addition'
                || $name === 'schrack_main_category_id'
                || $name === 'schrack_main_category_eid'
                || $name === 'schrack_qty_per_packaging_unit'
                || $name === 'schrack_sts_green_stamp'
                || $name === 'schrack_sts_is_download'
                || $name === 'schrack_qtyunit'
                || $name === 'schrack_qtyunit_id'
                || $name === 'schrack_sts_min_order_qty'
                || $name === 'schrack_priceunit'
                || $name === 'schrack_sts_batch_size'
                || $name === 'schrack_sts_main_supplier'
                || $name === 'schrack_sts_printed_manufacturer_number'
                || $name === 'schrack_sts_is_high_available'
                || $name === 'schrack_sts_not_available'
                || $name === 'schrack_sts_unmanaged_stocks'
                || $name === 'schrack_sts_webshop_saleable'
                || $name === 'schrack_main_producer'
                || $name === 'schrack_sts_transport_rate_pv'
                || $name === 'schrack_sts_trans_rate_bat'
                || $name === 'schrack_sts_plus_deli_time'
                || $name === 'schrack_sts_special_transport'
                // || $name === 'schrack_sts_promotion_label' // remove it when it was not set via dynamic attr "schrack_aktion"
                || substr($name,0,8) !== 'schrack_' ) {
                $toRemoveNdx[] = $ndx;
            }
        }
        foreach ( $toRemoveNdx as $ndx ) {
            unset($this->_unhandledAttributes[$ndx]);
        }
        self::endTrace('ArticlesHandler::prepareUnhandledAttributes');
    }

    private function markAttributeAsHandled ( $attrName ) {
        self::beginTrace('ArticlesHandler::markAttributeAsHandled');
        $toRemoveNdx = array_keys($this->_unhandledAttributes,$attrName);
        foreach ( $toRemoveNdx as $ndx ) {
            unset($this->_unhandledAttributes[$ndx]);
        }
        self::endTrace('ArticlesHandler::markAttributeAsHandled');
    }

    private function clearAttribute ( Schracklive_SchrackCatalog_Model_Product $product, $attributeCode ) {
        $attribute = $this->_code2attrDefMap[$attributeCode];
        if ( $attribute->getBackendType() != 'varchar' ) {
            return false; // only varchars are created dynamically yet
        }
        $entityTypeID = $product->getEntityTypeId();
        $entityID = $product->getId();
        $attributeID = $attribute->getAttributeId();
        // bloody magento has no built-in option to real delete eav attributes from DB - they only can be nulled!
        $query = "DELETE FROM `catalog_product_entity_varchar` WHERE entity_type_id = '$entityTypeID' AND entity_id = '$entityID' AND attribute_id = '$attributeID'";
        $this->_writeConnection->query($query);
        return true;
    }

    private function ensureDefaultStock ( Schracklive_SchrackCatalog_Model_Product $product ) {
        $stockId = 1;
        $productId = $product->getId();
        $stockItemModel = Mage::getModel('cataloginventory/stock_item');
        $itemExists = $stockItemModel->loadByStockIdAndProductId($stockId,$productId);
        if ( ! $itemExists ) {
            $stockItemModel->setTypeId('simple');
            $stockItemModel->setStockId($stockId);
            $stockItemModel->setProductId($productId);
            $stockItemModel->setIsInStock(1);
            $stockItemModel->setQty(99999.0);
            $stockItemModel->save();
        }
    }

    private function null2emptyString ( $str ) {
        if ( $str === null ) {
            $str = '';
        }
        return $str;
    }

}

?>
